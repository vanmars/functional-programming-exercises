**************
ROMAN NUMERALS
**************
Goal: Fiven a number, wite a method to convert it to a roman numeral.

Input (Number)   Output(String)
621              "DCXXI"


* Will need to check the length of starting number input
* Depending on what place an integer is in, it will be handled differently
* Need a function for ones, tens, hundreds, thousands
* Will need conditional statements: If in thosands place, will run thousands function, and then will need to get rid of that thousands place digit and run the central function again, so input number needs to be made into an array so we can shift the digit we are working with before re-running the central function.


*************
PRIME SIFTING
*************
Goal: Given a number, write a method that returns all of the prime numbers less than that number.

Input(Number)     Output(Array)
14                [2,3,5,7,11,13]

Sieve of Eratosthenes
1. Create list of numbers 2 to number
2. Let prime equal 2
3. Remove all multiples of prime from the list.
4. Increment prime by 1
5. When prime = number, all the remaining numbers in the list are primes.


*****************************
WHITEBOARD PRACTICE: Closures
*****************************
Problem 1: Use a closure to create multiple functions for adding a prefix to a name. The prefix could be Doctor, Duchess, Sir, and so on. It should be possible to create a new prefix function like this: const prefixSir = addPrefix("Sir");


*****************************
WHITEBOARD PRACTICE: Recursion
*****************************
Problem 1: Write a recursive function that reverses the order of words in a sentence. For instance, "I am a cat" should become "cat a am I".

Input(String)   OutOut(string)
"I am a cat"    "cat a am I"

1. Split string into an array
[I, am, a cat]
2. Reverse array
[cat, a, am, I]
3. Join array back into a string
"cat a am I"

Recursion
1. Grab the last item and go back to function